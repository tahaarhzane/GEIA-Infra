name: 'Terraform CI/CD'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Parse Azure Credentials
      run: |
        echo '${{ secrets.AZURE_CREDENTIALS }}' > azure_credentials.json
        echo "ARM_CLIENT_ID=$(jq -r .clientId azure_credentials.json)" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=$(jq -r .clientSecret azure_credentials.json)" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=$(jq -r .subscriptionId azure_credentials.json)" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=$(jq -r .tenantId azure_credentials.json)" >> $GITHUB_ENV
        echo "TF_VAR_prefix=$(jq -r .prefix azure_credentials.json)" >> $GITHUB_ENV
        echo "TF_VAR_location=$(jq -r .location azure_credentials.json)" >> $GITHUB_ENV
        echo "TF_VAR_sql_admin_username=$(jq -r .sqlAdminUsername azure_credentials.json)" >> $GITHUB_ENV
        echo "TF_VAR_alert_email=$(jq -r .alertEmail azure_credentials.json)" >> $GITHUB_ENV
        rm azure_credentials.json

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init

    - name: Terraform Workspace
      run: |
        terraform workspace select ${{ github.event.inputs.environment }} || terraform workspace new ${{ github.event.inputs.environment }}

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      if: github.event_name == 'workflow_dispatch'
      run: terraform apply -auto-approve tfplan

    - name: Terraform Output
      run: terraform output